- have a line be able to refer to another line in the same or another text, e.g. ref: Kaikai 260, and have the program edit the text files so that the references are all symmetric
- parse morphology
- predict parse based on wordform
- predict gloss based on morpheme
- for the predictions, have it present options to the user like FLEx does when you click on the dropdown arrows for word analysis or lex entry
- CLI commands for approving an analysis throughout a text or the whole corpus
- CLI commands for replacing a partial-word parse/gloss with a new one (e.g. change all -ko-mu 'fut-3sg' to -komu '3sg.fut')
- search/grep for things, highlight them in colors in the terminal output
- change word analysis globally or throughout text
- change which lines are being edited during parsing
- search lexicon
- add lexical items that aren't in any text
- change which heuristic is used for guessing word analysis: most recently seen in text, most commonly seen in text, most commonly seen overall
- make config subcommand that can do the following things:
-- change working directory for FLEx files
-- change which lines are shown for parsing/reading a text

- command ideas:
-- dry parse Kaikai
-- dry show Kaikai
-- dry show Kaikai 273
-- dry show-unparsed-lines
-- dry show-status-all
-- dry search Bl "omore" --ignore-diacritics  # let's ignore case and diacritics by default (maybe configurable), pass -c for case sensitive and -d for diacritic sensitive
-- dry search Bl "\bkhai"  # use regex always or have a flag for it? let's use -r/--raw for raw string, regex by default
--- each of the options case sens/insens, diacritic sens/insens, regex/raw should have its own flag, and if the flag matches the current config default then tell user that it's already doing this by default, and what they can do to switch the config setting
-- dry search Gl "fire"
-- dry search Fr "^Don't" --ignore-case
--- maybe instead of having subcommands for word/gloss/translation, I should have field names? since I want this to be pretty extensible for other fields the user might add, like who knows maybe they want a field for speaker name for every line in every text, so should be able to regex search all of those too given the label that the user has put on those lines

- need interactive session for doing the parsing itself, not sure how to convert this to something that a script could do with passing flags, probably best not to worry about this right now and just do the user-facing TTY version of DryBones
-- so `dry text parse TextName` would open such an interactive session where the user can type through to edit morpheme boundaries, add glosses, choose another existing word analysis, etc. like you can in FLEx

